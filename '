package main

import (
	vision "cloud.google.com/go/vision/apiv1"
	"context"
	"fmt"
	"io"
	"log"
	"os"
)

var repeat_map = make(map[string]bool)

const (
	DESKTOP_PATH = "/Users/ridhwaananayetullah/Desktop/"
)

func main() {

	path := DESKTOP_PATH + os.Args[1]

	dir, err := os.Open(path)
	if err != nil {
		log.Fatalf("Error opening directory: %s", err)
	}
	defer dir.Close()

	list, _ := dir.Readdirnames(0)
	res := make(string[], 100)
	for _, name := range list {
		if file, err := os.Open(path + "/" + name); err != nil {
			log.Fatal(err)
		}
		var filePath = path + "/" + name
		errc := make(chan error)
		go DetectText(
	}
}

func Print() {
	fmt.Println("hello")
}

func DetectText(file string, errors chan<- error) error {
	fmt.Printf("detecting text in %s\n", file)
	ctx := context.Background()

	client, err := vision.NewImageAnnotatorClient(ctx)
	if err != nil {
		errors <- err
		return err
	}

	f, err := os.Open(file)
	if err != nil {
		errors <- err
		return err
	}

	defer f.Close()

	image, err := vision.NewImageFromReader(f)
	if err != nil {
		errors <- err
		return err
	}

	annotations, err := client.DetectTexts(ctx, image, nil, 10)
	if err != nil {
		errors <- err
		return err
	}

	outputString := make([]string, 50)
	cnt := 0
	if len(annotations) == 0 {
		fmt.Println("No text found.")
	} else {
		// fmt.Fprintln(w, "Text:")
		for _, annotation := range annotations {
			cnt++
			repeat_map[annotation.Description] = true
			// the first line is the ocr of the entire document
			outputString = append(outputString, annotation.Description)
			break
			// fmt.Fprintf(w, "%q\n", annotation.Description)
		}
	}

	fmt.Println(outputString)
	fmt.Println(cnt)
	errors <- nil
	return nil
}
